import React from 'react';
import { Web3InboxClient } from '@web3inbox/core';
import { NotifyClientTypes } from '@walletconnect/notify-client';

interface W3iWidgetProps {
    onConnect: () => void;
    onSign: (message: string) => Promise<string>;
    account: string | null;
    projectId: string;
    domain?: string;
}
declare const W3iWidget: React.FC<W3iWidgetProps>;

/**
 * Init a singleton instance of the Web3InboxClient
 *
 * @param {Object} params - the params needed to init the client
 * @param {string} params.projectId - your WalletConnect Cloud project ID
 * @param {string} params.domain - The domain of the default dapp to target for functions.
 * @param {boolean} params.isLimited - All account's subscriptions accessable if explicitly set to false. Only param.domain's otherwise
 */
declare const useInitWeb3InboxClient: ({ projectId, domain, isLimited }: {
    projectId: string;
    domain?: string | undefined;
    isLimited?: boolean | undefined;
}) => boolean;
declare const useWeb3InboxClient: () => Web3InboxClient | null;
declare const useW3iAccount: () => {
    account: string | undefined;
    setAccount: (account: string) => Promise<void>;
    register: (onSign: (m: string) => Promise<string>) => Promise<string | null>;
    isRegistering: boolean;
    isRegistered: boolean;
    identityKey: string | undefined;
};

/**
 * Hook to watch messages of a subscription, and delete them
 *
 * @param {string} [account] - Account to get subscriptions messages from, defaulted to current account
 * @param {string} [domain] - Domain to get subscription messages from, defaulted to one set in init.
 */
declare const useMessages: (account?: string, domain?: string) => {
    messages: NotifyClientTypes.NotifyMessageRecord[];
    deleteMessage: (id: number) => Promise<void>;
};
/**
 * Hook to manage a subscription: subscribe, unsubscribe
 *
 * @param {string} [account] - Account to get subscriptions messages from , defaulted to current account
 * @param {string} [domain] - Domain to get subscription messages from, defaulted to one set in init.
 */
declare const useManageSubscription: (account?: string, domain?: string) => {
    subscribe: () => Promise<void>;
    unsubscribe: () => Promise<void>;
    isSubscribed: boolean;
    isSubscribing: boolean;
    isUnsubscribing: boolean;
};
/**
 * Hook to get all subscriptions of an account
 *
 * @param {string} [account] - Account to get subscription for, defaulted to current account
 * @param {string} [domain] - Domain to get subscription for, defaulted to one set in init.
 */
declare const useSubscription: (account?: string, domain?: string) => {
    subscription: NotifyClientTypes.NotifySubscription | null;
};
/**
 * Hook to get all subscriptions of an account
 *
 * @param {string} [account] - Account to get subscriptions from, defaulted to current account
 */
declare const useAllSubscriptions: (account?: string) => {
    subscriptions: NotifyClientTypes.NotifySubscription[];
};
declare const useSubscriptionScopes: (account?: string, domain?: string) => {
    scopes: NotifyClientTypes.ScopeMap;
    updateScopes: (scope: string[]) => Promise<boolean>;
};

declare const useManageView: () => {
    isOpen: boolean;
    open: () => void;
    close: () => void;
    toggle: () => void;
};

export { W3iWidget, W3iWidgetProps, useAllSubscriptions, useInitWeb3InboxClient, useManageSubscription, useManageView, useMessages, useSubscription, useSubscriptionScopes, useW3iAccount, useWeb3InboxClient };
